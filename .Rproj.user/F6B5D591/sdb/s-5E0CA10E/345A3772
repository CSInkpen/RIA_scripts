{
    "contents" : "####################################\n### RIA - CH.2 - Data Structures ###\n####################################\n\ngc(rm(list=ls()))\ngraphics.off()\n\n# matrix is a two-dimensional array where each element has the same mode\n#(numeric, character, or logical). Matrices are created with the 'matrix()' function\n\n# option byrow indictes whether the matrix should be filled in by row (byrow=TRUE) or\n# by column (byrow=FALSE). Default is by column.\n\ny <- matrix(1:20, nrow=5, ncol=4) # creates a 5x4 matrix.\ncells <- c(1,26,24,68)\nrnames <- c(\"R1\", \"R2\")\ncnames <- c(\"C1\", \"C2\")\nmymatrix <- matrix(cells, nrow=2, ncol=2, byrow=TRUE,\n                   dimnames=list(rnames, cnames))\nmymatrix\n\nmymatrix <- matrix(cells, nrow=2, ncol=2, byrow=FALSE,\n                   dimnames=list(rnames, cnames))\nmymatrix\n\n# This shows how to create a matrix. Then set one up with values and\n# and create different matrices by specifying byrow=TRUE or FALSE.\n\n# Using Matrix Subscripts\n\nx <- matrix(1:10, nrow=2)\nx\n# We have two rows, 5 columns. Byrow by default is true, so it'll populate\n# the numbers sequentially by row.\n\nx[2,]\n# This gives us just row 2, all columns\n\nx[1,4]\n# This gives us just row 1, column 4 = 7.\n\nx[1, c(4,5)]\n# This gives us the observations from row 1, columns 4 & 5.\n\n## Arrays ##\n\n# Arrays are similar to matrices, but can have more than two dimensions. \n# They're created with an array function. It looks like this;\n# myarray <- array(vector, dimensions, dimnames)\n# where vector contains the data for the array, dimensions is a numeric\n# vector giving the maximal index for each dimension, and dimnames is an\n# optional list of dimension labels. The following listing gives us\n# an example of creating a three-dimensional (2x3x4) array of numbers.\n\ndim1 <- c(\"A1\", \"A2\")\ndim2 <- c(\"B1\", \"B2\", \"B3\")\ndim3 <- c(\"C1\", \"C2\", \"C3\", \"C4\")\nz <- array(1:24, c(2,3,4), dimnames=list(dim1, dim2, dim3))\nz\n# so first, the vector is the numbers 1 through 24. That's the 'data'\n# we'll use. The second is a vector for the dimension. It says we want a\n# 2x3 matrix, and we want 4 of them. The next this is a specification for \n# how we want the dimensions named. It says the rows should be called A1-A2.\n# The columns should be B1-B3. And the matrices should be labelled C1-C4.\n\nz[1,2,3]\n# This says, give me the observation from the 1st row, 2nd column, from the 3rd matrix.\n\n## Data Frames ##\n\n# Data frame is more general than a matrix because it can contain different\n# modes of data (numeric, character, logical, etc.).\npatientID <- c(1,2,3,4)\nage <- c(25,34,28,52)\ndiabetes <- c(\"Type1\", \"Type2\", \"Type1\", \"Type1\")\nstatus <- c(\"Poor\", \"Improved\", \"Excellent\", \"Poor\")\npatientdata <- data.frame(patientID, age, diabetes, status)\npatientdata\n# This shows us the dataframe we created using data.frame().\npatientdata[1:2]\n# This gives us columns 1 through 2.\npatientdata[,2]\n# This gives us column 2.\npatientdata[2,]\n# This gives us row 2.\npatientdata$age\n# This gives us all the values for the variable 'age'\ntable(patientdata$diabetes, patientdata$status)\n# This gives us a cross-tab of diabetes by status.\n\n### If you attach or detach data or us 'with()', it allows you to reference\n# the variables without having to write the dataset$ part first. The attach() \n# attaches the data to the search path. The detach detaches it. The with function\n# lets you specify the dataset first.\nwith(patientdata, {\n  summary(age)\n  plot(status, age)\n})\n\n# How to create a factor.\nstatus1 <- factor(status, order=TRUE,\n                 levels=c(\"Poor\", \"Improved\", \"Excellent\"))\n\n\n## Lists ##\n\n# Lists are a complex type. It is an ordered collection of objects(components)\n# It allows you to gather a variety of (possibly unrelated) objects under \n# one name. It could contain a combo of vectors, matrices, data frames, and other lists.\n\n## Creating a List\ng <- \"My First List\"\nh <- c(25,26,18,39)\nj <- matrix(1:10, nrow=5)\nk <- c(\"one\", \"two\", \"three\")\nmylist <- list(title=g, ages=h, j, k)\nmylist\n# so we have a list with 4 components; a string, a numeric vector,\n# matrix, and a character vector.  \n# You can specify elements of the list with a name or number within\n# double brackets.\nmylist[[2]]\nmylist[[\"ages\"]]\n# Returns the second element, or ages (the same)\n\n### Some Useful Functions ###\nlength(y) # Number of elements/components\ndim(y)    # Dimensions of an object.\nstr(y)    # Structure of an object.\nclass(y)  # Class or type of an object.\nmode(y)   # How an object is stored.\nnames(y)  # Names of components in an object.\n# c(object, object)  - combines objects into a vector.\n# cbind(object, object) creates objects as columns.\n# rbind(object object) combines objects as rows.\ny # prints the object.\nhead(y) # lists the first 5 rows of the object.\ntail(y) # lists last 5 rows.\nls() # lists current objects in working environment. \n# rm(object, object) Deletes one or more objects from working environment.\n# rm(list=ls()) will remove most objects from the working environment.\nnewy <- edit(y) # edits objects and saves as new object. Opens it up in X11 quarts thing.\nfix(y) # edits in place.\n\n\n\n\n",
    "created" : 1423365202665.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1331653328",
    "id" : "345A3772",
    "lastKnownWriteTime" : 1423377527,
    "path" : "~/Desktop/Big_Data_stuff/R Resources/R_in_Action/RIA_scripts/RIA_CH2_Data_Structures.R",
    "project_path" : "RIA_CH2_Data_Structures.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}